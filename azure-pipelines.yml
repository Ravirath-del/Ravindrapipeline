trigger:
  - main
  - feature/*
pool: pipelinepool
parameters:
  - name: runScanning
    displayName: 'Run Scanning Job?'
    type: boolean
    default: false

jobs:
  - job: terraform_init_to_plan
    steps:
    - task: TerraformInstaller@1
      displayName: tool_install
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'pipelineservice'
        backendAzureRmStorageAccountName: 'bandgobhi'
        backendAzureRmContainerName: 'statefile'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTask@5
      displayName: terraform_validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    - task: TerraformTask@5
      displayName: terraform_Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'pipelineservice'

  - job: scanning_code
    condition: eq('${{ parameters.runScanning }}', true)
    steps:
    - task: tfsec@1
      inputs:
        version: 'v1.26.0'
    
  - job: ApprovalJob
    dependsOn: terraform_init_to_plan
    displayName: "Manual Validation Required"
    pool: server
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: |
          ravindrarathore92@gmail.com
        instructions: 'Please validate the Terraform plan before applying.'
        onTimeout: 'reject'
        timeout: '1d'

  - job: terraform_apply
    dependsOn: terraform_init_to_plan
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    steps:
    - task: TerraformTask@5
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'pipelineservice'
        backendAzureRmStorageAccountName: 'bandgobhi'
        backendAzureRmContainerName: 'statefile'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTask@5
      displayName: terraform_apply
      
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'pipelineservice'